# main.py - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å React

from fastapi import FastAPI, Request, HTTPException, Depends, Query
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, RedirectResponse, JSONResponse
from contextlib import asynccontextmanager
import uvicorn
import os
from typing import Dict, Optional

# –ò–º–ø–æ—Ä—Ç—ã —Ä–æ—É—Ç–µ—Ä–æ–≤
from app.routers import clients
from app.routers import main, requests, auth, dashboard, users
from app.config import settings
from app.database_pg import db
from app.auth import verify_token_from_cookie, require_role_cookie, clear_auth_cookie
from app.middleware import AuthenticationMiddleware

@asynccontextmanager
async def lifespan(app: FastAPI):
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ROCKET PC...")

    # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏ (–ë–ï–ó static –¥–ª—è React)
    if not os.path.exists("uploads"):
        os.makedirs("uploads")

    try:
        await db.connect()
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ PostgreSQL")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")

    yield

    print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    await db.disconnect()

app = FastAPI(
    title=settings.APP_TITLE,
    description=settings.APP_DESCRIPTION,
    version=settings.APP_VERSION,
    lifespan=lifespan
)

# CORS –¥–ª—è React (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–ª—è SPA)
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000",  # React dev server
        "http://127.0.0.1:3000",
        "http://localhost:5173",  # Vite dev server
        "http://127.0.0.1:5173",
        # –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à –ø—Ä–æ–¥–∞–∫—à–Ω –¥–æ–º–µ–Ω
        # "https://yourdomain.com"
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –£–ë–†–ê–õ–ò middleware –¥–ª—è auth, —Ç–∞–∫ –∫–∞–∫ –≤ React —ç—Ç–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É
# app.add_middleware(AuthenticationMiddleware)

# –£–ë–†–ê–õ–ò –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ static —Ñ–∞–π–ª–æ–≤
# app.mount("/static", StaticFiles(directory="static"), name="static")

# –¢–æ–ª—å–∫–æ API —Ä–æ—É—Ç—ã
app.include_router(requests.router, prefix="/api")
app.include_router(clients.router, prefix="/api") 
app.include_router(auth.router, prefix="/api")
app.include_router(users.router, prefix="/api")

# API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è dashboard (React –±—É–¥–µ—Ç –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å)
@app.get("/api/dashboard/stats")
async def dashboard_api_stats():
    try:
        stats = await db.get_statistics()
        all_requests = await db.get_all_repair_requests()
        active_requests = len([r for r in all_requests if r['status'] != '–í—ã–¥–∞–Ω–∞' and not r['is_archived']])
        completed_requests = len([r for r in all_requests if r['status'] == '–í—ã–¥–∞–Ω–∞'])
        stats.update({
            'active_requests': active_requests,
            'completed_requests': completed_requests,
            'monthly_revenue': completed_requests * 5000,
            'avg_repair_time': 3
        })
        return stats
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {
            'active_requests': 0,
            'completed_requests': 0,
            'monthly_revenue': 0,
            'avg_repair_time': 0
        }

@app.get("/api/dashboard/requests")
async def get_dashboard_requests():
    try:
        all_requests = await db.get_all_repair_requests()
        recent_requests = sorted(all_requests, key=lambda r: r['created_at'], reverse=True)
        return recent_requests
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
        return []

@app.get("/api/dashboard/recent-requests")
async def get_dashboard_recent_requests():
    try:
        all_requests = await db.get_all_repair_requests()
        recent_requests = sorted(all_requests, key=lambda r: r['created_at'], reverse=True)
        return recent_requests[:5]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—è–≤–æ–∫: {e}")
        return []

@app.get("/api/masters/available")
async def get_available_masters_api():
    try:
        masters = await db.get_available_masters()
        for master in masters:
            master["skills"] = await db.get_master_skills(master["id"])
        return masters
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–æ–≤: {e}")
        return []

@app.post("/api/requests/{request_id}/assign-master")
async def assign_master_api(request_id: str, assignment_data: dict):
    try:
        success = await db.assign_master_to_request(
            request_id=request_id,
            master_id=assignment_data.get("master_id"),
            assigned_by_id=1  # TODO: –ø–æ–ª—É—á–∞—Ç—å –∏–∑ —Ç–æ–∫–µ–Ω–∞
        )
        if not success:
            raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return {"message": "–ú–∞—Å—Ç–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω"}
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞")

@app.delete("/api/requests/{request_id}/unassign-master")
async def unassign_master_api(request_id: str):
    try:
        success = await db.unassign_master_from_request(request_id)
        if not success:
            raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –º–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")
        return {"message": "–ú–∞—Å—Ç–µ—Ä —Å–Ω—è—Ç —Å –∑–∞—è–≤–∫–∏"}
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –º–∞—Å—Ç–µ—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –º–∞—Å—Ç–µ—Ä–∞")

# Health check –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã API
@app.get("/api/health")
async def health_check():
    return {
        "status": "healthy",
        "database": "connected" if db.pool else "disconnected"
    }

# –ë–∞–∑–æ–≤—ã–π API endpoint
@app.get("/api")
async def api_root():
    return {
        "message": "ROCKET PC Service Center API",
        "version": settings.APP_VERSION,
        "status": "online"
    }

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è API
@app.exception_handler(404)
async def not_found_handler(request: Request, exc: HTTPException):
    if request.url.path.startswith("/api"):
        return JSONResponse(status_code=404, content={"detail": "Endpoint not found"})
    # –î–ª—è –Ω–µAPI –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 404
    return JSONResponse(status_code=404, content={"detail": "Not found"})

@app.exception_handler(500)
async def internal_error_handler(request: Request, exc: Exception):
    print(f"üí• –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {exc}")
    if request.url.path.startswith("/api"):
        return JSONResponse(status_code=500, content={"detail": "Internal server error"})
    return JSONResponse(status_code=500, content={"detail": "Internal server error"})

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host=settings.HOST,
        port=settings.PORT,
        reload=settings.DEBUG
    )