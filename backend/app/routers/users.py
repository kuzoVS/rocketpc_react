from fastapi import APIRouter, HTTPException, Depends, Request, Form
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from typing import Dict, Optional, List
from datetime import datetime

from app.database_pg import db
from app.auth import verify_token_from_cookie, require_role_cookie
from app.config import settings

router = APIRouter(prefix="/dashboard/users", tags=["users"])
templates = Jinja2Templates(directory="templates")


@router.get("", response_class=HTMLResponse)
async def users_page(
        request: Request,
        search: Optional[str] = None,
        role: Optional[str] = None,
        status: Optional[str] = None,
        sort: Optional[str] = "name",
        token_data: Dict = Depends(require_role_cookie(["admin", "director"]))
):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ–ø–µ—Ä—å –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ)
        all_users = await db.get_all_users()

        return templates.TemplateResponse("dashboard/users.html", {
            "request": request,
            "users": all_users,  # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            "page": "users"
        })

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return templates.TemplateResponse("dashboard/users.html", {
            "request": request,
            "users": [],
            "page": "users",
            "error": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"
        })


@router.post("", response_class=HTMLResponse)
async def create_user(
        request: Request,
        username: str = Form(...),
        email: str = Form(...),
        password: str = Form(...),
        full_name: str = Form(...),
        role: str = Form(...),
        phone: Optional[str] = Form(None),
        token_data: Dict = Depends(require_role_cookie(["admin", "director"]))
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if len(password) < 6:
            raise HTTPException(status_code=400, detail="–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤")

        if role not in ['admin', 'director', 'manager', 'master']:
            raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ username –∏ email
        if await db.check_username_exists(username):
            return RedirectResponse(url="/dashboard/users?error=username_exists", status_code=302)

        if await db.check_email_exists(email):
            return RedirectResponse(url="/dashboard/users?error=email_exists", status_code=302)

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = await db.create_user(
            username=username.strip(),
            email=email.strip(),
            password=password,
            full_name=full_name.strip(),
            role=role,
            phone=phone.strip() if phone else None
        )

        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_id}")

        return RedirectResponse(url="/dashboard/users?success=created", status_code=302)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        error_msg = str(e) if "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in str(e) or "duplicate" in str(
            e).lower() else "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        return RedirectResponse(url=f"/dashboard/users?error={error_msg}", status_code=302)


@router.post("/{user_id}", response_class=HTMLResponse)
async def update_user(
        request: Request,
        user_id: int,
        username: str = Form(...),
        email: str = Form(...),
        full_name: str = Form(...),
        role: str = Form(...),
        is_active: str = Form(...),
        phone: Optional[str] = Form(None),
        password: Optional[str] = Form(None),
        token_data: Dict = Depends(require_role_cookie(["admin", "director"]))
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if role not in ['admin', 'director', 'manager', 'master']:
            raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        active_status = is_active.lower() == 'true'

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ email (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        if await db.check_email_exists(email, exclude_user_id=user_id):
            return RedirectResponse(url="/dashboard/users?error=email_exists", status_code=302)

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await db.update_user_info(
            user_id=user_id,
            email=email.strip(),
            full_name=full_name.strip(),
            role=role,
            is_active=active_status,
            phone=phone.strip() if phone else None
        )

        if not success:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if password and password.strip() and len(password.strip()) >= 6:
            await db.update_user_password(user_id, password.strip())

        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_id}")
        return RedirectResponse(url="/dashboard/users?success=updated", status_code=302)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        error_msg = str(e) if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in str(e) else "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        return RedirectResponse(url=f"/dashboard/users?error={error_msg}", status_code=302)


@router.post("/{user_id}/activate", response_class=HTMLResponse)
async def activate_user(
        user_id: int,
        token_data: Dict = Depends(require_role_cookie(["admin", "director"]))
):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        success = await db.update_user_status(user_id, True)
        if not success:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        print(f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_id}")
        return RedirectResponse(url="/dashboard/users?success=activated", status_code=302)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return RedirectResponse(url="/dashboard/users?error=activation_failed", status_code=302)


@router.post("/{user_id}/deactivate", response_class=HTMLResponse)
async def deactivate_user(
        user_id: int,
        token_data: Dict = Depends(require_role_cookie(["admin", "director"]))
):
    """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        if token_data.get("sub") == str(user_id):
            return RedirectResponse(url="/dashboard/users?error=cannot_deactivate_self", status_code=302)

        success = await db.update_user_status(user_id, False)
        if not success:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        print(f"‚úÖ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_id}")
        return RedirectResponse(url="/dashboard/users?success=deactivated", status_code=302)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return RedirectResponse(url="/dashboard/users?error=deactivation_failed", status_code=302)


@router.post("/{user_id}/delete", response_class=HTMLResponse)
async def delete_user(
        user_id: int,
        token_data: Dict = Depends(require_role_cookie(["admin", "director"]))
):
    """–ü–û–õ–ù–û–ï —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print(f"üóëÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        current_user_id = int(token_data.get("sub"))
        if current_user_id == user_id:
            print(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è: {current_user_id}")
            return RedirectResponse(url="/dashboard/users?error=cannot_delete_self", status_code=302)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db.get_user(user_id)
        if not user:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return RedirectResponse(url="/dashboard/users?error=user_not_found", status_code=302)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        if user['role'] in ['admin', 'director']:
            admin_count = await db.get_users_count_by_role()
            total_admins = admin_count.get('admin', 0) + admin_count.get('director', 0)
            print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–æ–≤: {total_admins}")

            if total_admins <= 1:
                print(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return RedirectResponse(url="/dashboard/users?error=cannot_delete_last_admin", status_code=302)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['full_name']} ({user['username']}) –ø—Ä–∏–≤–µ–¥–µ—Ç –∫:")
        print(f"   - –û–±–Ω—É–ª–µ–Ω–∏—é —Å—Å—ã–ª–æ–∫ –Ω–∞ –Ω–µ–≥–æ –≤–æ –≤—Å–µ—Ö –∑–∞—è–≤–∫–∞—Ö")
        print(f"   - –£–¥–∞–ª–µ–Ω–∏—é –µ–≥–æ –Ω–∞–≤—ã–∫–æ–≤ (–µ—Å–ª–∏ –º–∞—Å—Ç–µ—Ä)")
        print(f"   - –£–¥–∞–ª–µ–Ω–∏—é –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π")

        # –ü–û–õ–ù–û–°–¢–¨–Æ —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await db.delete_user(user_id)
        if not success:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return RedirectResponse(url="/dashboard/users?error=deletion_failed", status_code=302)

        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({user['username']}) –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω")
        return RedirectResponse(url="/dashboard/users?success=deleted", status_code=302)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        import traceback
        traceback.print_exc()
        return RedirectResponse(url="/dashboard/users?error=deletion_failed", status_code=302)


# API endpoints –¥–ª—è AJAX –∑–∞–ø—Ä–æ—Å–æ–≤
@router.get("/api/list")
async def get_users_api(
        token_data: Dict = Depends(require_role_cookie(["admin", "director"]))
):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        users = await db.get_all_users()
        return {
            "users": users,
            "total": len(users)
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

@router.get("/api/statistics")
async def get_user_statistics_api(
        token_data: Dict = Depends(require_role_cookie(["admin", "director"]))
):
    print(token_data)
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        stats = await db.get_user_statistics()
        return stats
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.get("/api/{user_id}")
async def get_user_api(
        user_id: int,
        token_data: Dict = Depends(require_role_cookie(["admin", "director"]))
):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        user = await db.get_user(user_id)
        if not user:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return user
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")


