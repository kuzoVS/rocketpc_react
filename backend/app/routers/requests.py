from fastapi import APIRouter, HTTPException, Depends, Request
from typing import List, Dict, Optional
from pydantic import BaseModel, Field
from datetime import datetime
from decimal import Decimal
from datetime import date
from app.models import RepairRequest, StatusResponse, StatusUpdate
from app.database_pg import db
from app.config import settings
from app.auth import verify_token, require_role, verify_token_from_cookie

router = APIRouter(prefix="/requests", tags=["requests"])


# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
class CreateRequestModel(BaseModel):
    client_name: str = Field(..., min_length=2, max_length=100)
    phone: str = Field(..., min_length=10, max_length=20)
    email: str = Field(default="", max_length=100)
    device_type: str = Field(..., min_length=2, max_length=50)
    brand: str = Field(default="", max_length=50)
    model: str = Field(default="", max_length=100)
    problem_description: str = Field(..., min_length=10, max_length=1000)
    priority: str = Field(default="–û–±—ã—á–Ω–∞—è")
    assigned_master_id: Optional[int] = None  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏

    class Config:
        json_schema_extra = {
            "example": {
                "client_name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
                "phone": "+7 (999) 123-45-67",
                "email": "ivan@example.com",
                "device_type": "–ù–æ—É—Ç–±—É–∫",
                "brand": "ASUS",
                "model": "VivoBook 15",
                "problem_description": "–ù–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è, –Ω–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–∏—Ç–∞–Ω–∏—è",
                "priority": "–û–±—ã—á–Ω–∞—è"
            }
        }


# –ú–æ–¥–µ–ª—å –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞
class AssignMasterModel(BaseModel):
    master_id: int
    comment: Optional[str] = None


# –ú–æ–¥–µ–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
class UpdateRequestModel(BaseModel):
    status: Optional[str] = None
    priority: Optional[str] = None
    estimated_cost: Optional[float] = None
    comment: Optional[str] = None
    problem_description: Optional[str] = Field(None, min_length=10, max_length=1000)


# üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
async def get_optional_token(request) -> Optional[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ–º –µ–≥–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"""
    try:
        from fastapi import Request
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ cookie
        token = request.cookies.get("session_token")
        if token:
            from app.auth import verify_token_from_str
            return verify_token_from_str(token)
        return None
    except Exception:
        return None


# üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫
@router.post("/", response_model=dict)
async def create_request_public(
    request: CreateRequestModel, 
    http_request: Request
):
    """
    üåü –ü–£–ë–õ–ò–ß–ù–´–ô —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏.
    –ù–ï –¢–†–ï–ë–£–ï–¢ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫.
    """
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        client_data = {
            "full_name": request.client_name,
            "phone": request.phone,
            "email": request.email
        }

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        device_data = {
            "device_type": request.device_type,
            "brand": request.brand,
            "model": request.model,
            "problem_description": request.problem_description,
            "priority": request.priority
        }

        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        token_data = await get_optional_token(http_request)
        created_by_id = None
        if token_data:
            created_by_id = int(token_data.get("sub"))
            print(f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {token_data.get('username')}")
        else:
            print("üåê –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        request_id = await db.create_repair_request(client_data, device_data, created_by_id)

        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if request.assigned_master_id and token_data:
            await db.assign_master_to_request(
                request_id,
                request.assigned_master_id,
                created_by_id
            )

        return {
            "id": request_id,
            "message": "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
            "status": "success"
        }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        raise HTTPException(
            status_code=500,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.get("/{request_id}/status", response_model=StatusResponse)
async def get_request_status(request_id: str):
    """
    üåü –ü–£–ë–õ–ò–ß–ù–´–ô —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏.
    –ù–ï –¢–†–ï–ë–£–ï–¢ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ª—é–±–æ–π –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ ID.
    """
    request_data = await db.get_repair_request(request_id)

    if not request_data:
        raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    return StatusResponse(
        id=request_data["request_id"],
        client_name=request_data["client_name"],
        device_type=request_data["device_type"],
        problem_description=request_data["problem_description"],
        status=request_data["status"],
        created_at=request_data["created_at"]
    )


# üîí –ó–ê–©–ò–©–ï–ù–ù–´–ï —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏ (—Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)

@router.get("/", response_model=List[dict])
async def get_all_requests(
        token_data: Dict = Depends(verify_token),
        include_archived: bool = False
):
    """
    üîí –ó–ê–©–ò–©–ï–ù–ù–´–ô —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫.
    –¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    """
    try:
        requests = await db.get_all_repair_requests(include_archived)
        return requests
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
        return []


@router.put("/{request_id}")
async def update_request(
        request_id: str,
        update_data: UpdateRequestModel,
        token_data: Dict = Depends(verify_token)
):
    """üîí –ó–ê–©–ò–©–ï–ù–ù–´–ô —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if update_data.status:
            if update_data.status not in settings.REPAIR_STATUSES:
                raise HTTPException(
                    status_code=400,
                    detail=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(settings.REPAIR_STATUSES)}"
                )

            success = await db.update_request_status(
                request_id=request_id,
                new_status=update_data.status,
                user_id=int(token_data["sub"]),
                comment=update_data.comment
            )

            if not success:
                raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
        if update_data.problem_description:
            await db.update_problem_description(request_id, update_data.problem_description)

        return {"message": "–ó–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"}

    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏")


@router.post("/{request_id}/assign-master")
async def assign_master(
        request_id: str,
        assignment: AssignMasterModel,
        token_data: Dict = Depends(require_role(["admin", "director", "manager"]))
):
    """üîí –ó–ê–©–ò–©–ï–ù–ù–´–ô —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞"""
    try:
        success = await db.assign_master_to_request(
            request_id=request_id,
            master_id=assignment.master_id,
            assigned_by_id=int(token_data["sub"])
        )

        if not success:
            raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        if assignment.comment:
            await db.update_request_status(
                request_id=request_id,
                new_status=(await db.get_repair_request(request_id))["status"],
                user_id=int(token_data["sub"]),
                comment=f"–ù–∞–∑–Ω–∞—á–µ–Ω –º–∞—Å—Ç–µ—Ä: {assignment.comment}"
            )

        return {"message": "–ú–∞—Å—Ç–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω"}

    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞")