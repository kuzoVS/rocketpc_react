from fastapi import APIRouter, HTTPException, Depends, Query
from typing import List, Dict, Optional
from pydantic import BaseModel, Field
from datetime import datetime
from app.database_pg import db
from app.auth import verify_token_from_cookie, require_role, require_role_cookie

router = APIRouter(prefix="/clients", tags=["clients"])


# –ú–æ–¥–µ–ª–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
class ClientCreate(BaseModel):
    full_name: str = Field(..., min_length=2, max_length=100)
    phone: str = Field(..., min_length=10, max_length=20)
    email: Optional[str] = Field(None, max_length=100)
    address: Optional[str] = None
    is_vip: bool = False
    notes: Optional[str] = None


class ClientUpdate(BaseModel):
    full_name: Optional[str] = Field(None, min_length=2, max_length=100)
    phone: Optional[str] = Field(None, min_length=10, max_length=20)
    email: Optional[str] = Field(None, max_length=100)
    address: Optional[str] = None
    is_vip: Optional[bool] = None
    notes: Optional[str] = None


@router.get("/")
async def get_all_clients(
        search: Optional[str] = Query(None, description="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏, —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ email"),
        include_stats: bool = Query(True, description="–í–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"),
        token_data: Dict = Depends(verify_token_from_cookie)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø–æ–∏—Å–∫–æ–º"""
    try:
        if search:
            clients = await db.search_clients(search)
        else:
            clients = await db.get_all_clients(include_stats)
        return clients
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")


@router.get("/statistics")
async def get_client_statistics(token_data: Dict = Depends(verify_token_from_cookie)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º"""
    try:
        stats = await db.get_client_statistics()
        return stats
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.get("/vip")
async def get_vip_clients(token_data: Dict = Depends(verify_token_from_cookie)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ VIP –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    try:
        vip_clients = await db.get_vip_clients()
        return vip_clients
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è VIP –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")

@router.get("/search")
async def search_clients_by_phone(
    phone: str = Query(..., min_length=3),
    token_data: Dict = Depends(verify_token_from_cookie)
):
    """
    üîç –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø–æ —á–∞—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞)
    """
    try:
        clean_token = ''.join(filter(str.isdigit, phone))

        if not clean_token or len(clean_token) < 3:
            return []

        results = await db.search_clients_by_phone(clean_token)

        return [{
            "id": c["id"],
            "full_name": c["full_name"],
            "phone": c["phone"],
            "email": c.get("email")
        } for c in results]

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")

@router.get("/{client_id}")
async def get_client(client_id: int, token_data: Dict = Depends(verify_token_from_cookie)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    try:
        client = await db.get_client_by_id(client_id)
        if not client:
            raise HTTPException(status_code=404, detail="–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        requests = await db.get_client_requests(client_id)
        client['requests'] = requests

        devices = await db.get_client_device_types(client_id)
        client['device_types'] = devices

        return client
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")


@router.get("/{client_id}/requests")
async def get_client_requests(
        client_id: int,
        limit: Optional[int] = Query(None, description="–õ–∏–º–∏—Ç –∑–∞—è–≤–æ–∫"),
        token_data: Dict = Depends(verify_token_from_cookie)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        requests = await db.get_client_requests(client_id, limit)
        return requests
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")


@router.post("/")
async def create_client(
        client_data: ClientCreate,
        token_data: Dict = Depends(require_role_cookie(["admin", "director", "manager"]))
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        client_id = await db.create_client(
            full_name=client_data.full_name,
            phone=client_data.phone,
            email=client_data.email,
            address=client_data.address
        )

        update_data = {}
        if client_data.is_vip:
            update_data['is_vip'] = client_data.is_vip
        if client_data.notes:
            update_data['notes'] = client_data.notes

        if update_data:
            await db.update_client(client_id, update_data)

        return {"id": client_id, "message": "–ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞")



@router.put("/{client_id}")
async def update_client(
        client_id: int,
        client_data: ClientUpdate,
        token_data: Dict = Depends(verify_token_from_cookie)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ"""
    try:
        existing_client = await db.get_client_by_id(client_id)
        if not existing_client:
            raise HTTPException(status_code=404, detail="–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        update_data = {
            field: value for field, value in client_data.dict(exclude_unset=True).items()
            if value is not None
        }

        if not update_data:
            return {"message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"}

        success = await db.update_client(client_id, update_data)
        if not success:
            raise HTTPException(status_code=400, detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞")

        return {"message": "–ö–ª–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"}
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞")


@router.delete("/{client_id}")
async def delete_client(
        client_id: int,
        token_data: Dict = Depends(require_role_cookie(["admin", "director"]))
):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫)"""
    try:
        existing_client = await db.get_client_by_id(client_id)
        if not existing_client:
            raise HTTPException(status_code=404, detail="–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        success = await db.delete_client(client_id)
        if not success:
            raise HTTPException(
                status_code=400,
                detail="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏"
            )

        return {"message": "–ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"}
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞")
